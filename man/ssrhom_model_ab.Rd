% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ssrhom_model_ab.R
\name{ssrhom_model_ab}
\alias{ssrhom_model_ab}
\title{Analyze AB design}
\usage{
ssrhom_model_ab(
  data,
  grouping = NA_character_,
  condition = NA_character_,
  time = NA_character_,
  outcome = NA_character_,
  case = NA_character_,
  increase = TRUE,
  warmup = 750,
  sampling = 750,
  refresh = max((warmup + sampling)\%/\%10, 1),
  adapt_delta = 0.9,
  max_treedepth = 10,
  chains = 3,
  cores = min(chains, max(parallel::detectCores() - 2, 1)),
  seed = sample.int(.Machine$integer.max, 1),
  show_messages = TRUE
)
}
\arguments{
\item{data}{A dataset, ideally a data.frame.}

\item{grouping}{The name of the grouping variable in the dataset.}

\item{condition}{The level of the grouping variable that identifies the
treatment condition.}

\item{time}{The name of the time variable. This must be a series of
positive whole numbers signifiying the time the outcome was measured.}

\item{outcome}{The name of the outcome variable.}

\item{case}{The name of the variable that identifies different cases
in the dataset.}

\item{increase}{TRUE (Default) if increase in outcome is desirable.
Set FALSE if increase in outcome is undesirable.}

\item{warmup}{Number of iterations used to warmup the sampler, per chain.}

\item{sampling}{Number of iterations retained for inference, per chain.}

\item{refresh}{(Positive whole number) How often to print the status of
the sampler.}

\item{adapt_delta}{Number in (0,1). Increase to resolve divergent
transitions.}

\item{max_treedepth}{(Positive whole number) Increase to resolve problems
with maximum tree depth.}

\item{chains}{Number of chains to use.}

\item{cores}{Number of cores to use.}

\item{seed}{Random seed.}

\item{show_messages}{(Logical) If TRUE, show messages from Stan sampler,
if FALSE, hide messages.}
}
\value{
Object containing analysis results.
}
\description{
Analyze AB design
}
\examples{
\dontrun{
tasky_model <- ssrhom_model_ab(
  data = tasky,
  grouping = "phase", condition = "B",
  time = "time", outcome = "count"
)
ssrhom_get_effect(tasky_model, stat = "nap")
}
}
